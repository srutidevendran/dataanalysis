cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width=12,
fig.height=7
)
pacman::p_load(
dplyr, # data manipulation
readr, # reading in data
ggplot2 # visualizing data
)
temp <- readr::read_csv('glob.csv') %>%
select(Year, Temp, CO2, CH4, sunspot, volcanic) %>%
setNames(tolower(names(.))) # variable names are lower case
glimpse(temp)
ggplot(temp, aes(temp, year)) + geom_point() + ggtitle('Temperature as a function of time')
pairs(temp, main="Pairs Plot")
temp_period <-
temp %>%
mutate(time_period = ntile(year, 4))
glimpse(temp_period)
group <- temp_period %>%
group_by(time_period)
summarize(group)
ggplot(temp_period, aes(x=temp))+geom_histogram(bins=15)+facet_wrap('time_period')
lm1 <-lm(temp~year, data = temp)
summary(lm1)
lm1$coefficients['year']
pacman::p_load(Kendall)
temp_period %>%
group_by(time_period) %>%
summarize(beta_hat = lm(temp ~ year)$coeff['year'])
temp_period %>%
group_by(time_period) %>%
summarize(tau = MannKendall(temp)$tau)
temp_model_1 <- lm(data=temp, temp ~ year + co2 + ch4 + sunspot +volcanic)
summary(temp_model_1)
plot(temp_model_1)
n_boot <- 200 # number of bootstrapped linear models
yhat <- rep(NA, n_boot) # initialize place for our estimates to go
for (n in 1:n_boot){
new_data <- temp %>%
filter(year < max(year)) %>%
sample_frac(size = 1, replace = TRUE)
lm_i <- lm(temp ~ ., data = new_data)
yhat[n] <- predict(lm_i, newdata=filter(temp, year==max(year)))
}
boxplot(yhat[], xlab = "")
hist(yhat[])
temp_lag <- temp %>%
mutate(lag_temp = lag(temp, 1)) %>%
filter(!is.na(lag_temp))
glimpse(temp_lag)
temp_model_2 <- lm(temp ~ lag_temp, data = temp_lag)
plot(temp_model_2)
temp_model_3 <- lm(temp ~ poly(year,4, raw=TRUE), data = temp)
plot(temp_model_3)
summary(temp_model_3)
n_boot <- 50
for (n in 1:n_boot){
new_data <-
temp %>%
sample_frac(size = 1, replace = TRUE) %>%
arrange(year)
poly_i <- lm(temp ~ poly(year, 2, raw=TRUE), data = new_data)
predicted <- predict(poly_i, newdata = temp)
if (n == 1){
plot(temp$year, predicted, type='l', col=alpha('black', 0.3))
} else {
lines(temp$year, predicted, col=alpha('black', 0.3))
}
}
n_boot <- 50
for (n in 1:n_boot){
new_data <-
temp %>%
sample_frac(size = 1, replace = TRUE) %>%
arrange(year)
poly_i <- lm(temp ~ poly(year, 4, raw=TRUE), data = new_data)
predicted <- predict(poly_i, newdata = temp)
if (n == 1){
plot(temp$year, predicted, type='l', col=alpha('black', 0.3))
} else {
lines(temp$year, predicted, col=alpha('black', 0.3))
}
}
library("knitr", lib.loc="~/R/win-library/3.4")
library("stringi", lib.loc="~/R/win-library/3.4")
install.packages('rmdformats')
efv
# DO NOT edit this block
knitr::opts_chunk$set(
cache=TRUE,
# DO NOT edit this block
knitr::opts_chunk$set(
cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width=12,
fig.height=7
)
# DO NOT edit this block
knitr::opts_chunk$set(
cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width=12,
fig.height=7
)
if(!require(pacman)) install.packages('pacman')
pacman::p_load(dplyr, readr)
app15 <- read_csv('appc15.csv') %>%
setNames(tolower(names(.))) # variable names are lower case
glimpse(app15)
app16 <- read_csv('appc16.csv') %>%
setNames(tolower(names(.))) # variable names are lower case
glimpse(app16)
train.size <- 0.5
train.index <- sample.int(length(app16$uranium), round(length(app16$uranium) * train.size))
train.sample <- app16[train.index,]
valid.sample <- app16[-train.index,]
pairs(app16, col="red")
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)
summary(fit4)
PredictFit4 <- predict(fit4, newdata = valid.sample)
acf(fit4$residuals, main="Autocorrelation of the residuals")
plot(valid.sample$uranium, PredictFit4)
plot(fit4)
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)4
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)4
fit5 <- lm(uranium ~ tds + tds * bicarbonate, data= train.sample)
summary(fit4)
plot(fit5)
fit2 <- lm(uranium ~ tds * bicarbonate, data = train.sample)
summary(fit2)
plot(fit5)
plot(valid.sample$tds, valid.sample$uranium)
lines(valid.sample$tds, PredictFit4)
plot(valid.sample$tds, valid.sample$uranium)
lines(valid.sample$tds, PredictFit2)
fit2 <- lm(uranium ~ tds * bicarbonate, data = train.sample)
summary(fit2)
PredictFit2 <- predict(fit2, newdata = valid.sample)
acf(fit2$residuals, main="Autocorrelation of the residuals")
plot(valid.sample$tds, valid.sample$uranium)
lines(valid.sample$tds, PredictFit2)
plot(valid.sample$bicarbonate, valid.sample$uranium)
lines(valid.sample$bicarbonate, PredictFit2)
plot(valid.sample$tds, valid.sample$uranium, col = "red")
lines(valid.sample$tds, PredictFit2, col="blue")
plot(density(PredictFit4))
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)
summary(fit4)
plot(fit4)
acf(fit4$residuals, main="Autocorrelation of the residuals")
fit5 <- lm(uranium ~ tds + tds * bicarbonate, data= train.sample)
summary(fit4)
PredictFit4 <- predict(fit4, newdata = valid.sample)
acf(fit4$residuals, main="Autocorrelation of the residuals")
plot(fit5)
summary(fit5)
plot(temp$year, temp$temp, xlab="Year", ylab="Temperature", main="Polynomial Fit")
lines(temp$year, predict(temp_model_3))
plot(valid.sample$uranium, PredictFit4)
plot(valid.sample$tds, valid.sample$uranium, col = "red")
lines(valid.sample$tds, PredictFit2, col="blue")
data1 <- app16  %>%
filter(app16$tds <700)
data2 <- app16  %>%
filter(app16$tds > 700)
#Fit 6 is the best model so far
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = data1 )
PredictFit6 <- predict(fit6, newdata = app16)
cor(app16$uranium, PredictFit6)
plot(fit6)
summary(fit6)
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)
summary(fit4)
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = data1 )
PredictFit6 <- predict(fit6, newdata = app16)
acf(fit6$residuals, main="Autocorrelation of the residuals")
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = app16)
plot(fit6)
summary(fit6)
acf(fit6$residuals, main="Autocorrelation of the residuals")
uraniumdata <- log(app16$uranium)
fit6 <- lm(uraniumdata ~ tds+ tds * bicarbonate, data = app16)
summary(fit6)
acf(fit6$residuals, main="Autocorrelation of the residuals")
PredictFit6 <- predict(fit6, newdata = app16)
plot(PredictFit6)
plot(density(PredictFit6))
acf(fit6$residuals, main="Autocorrelation of the residuals")
summary(fit6)
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = app16)
summary(fit6)
anova(fit6)
fit6 <- lm(uraniumdata ~ tds+ tds * bicarbonate, data = app16)
summary(fit6)
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = app16)
summary(fit6)
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = app16)
plot(density(fit6))
plot(density(fit6))
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = train.sample)
PredictFit6 <- predict(fit6, newdata = valid.sample)
plot(density(PredictFit6))
acf(fit6$residuals, main="Autocorrelation of the residuals")
plot(valid.sample$tds, valid.sample$uranium)
lines(valid.sample$tds, PredictFit6)
cor(app16$uranium, PredictFit6)
cor(valid.sample$uranium, PredictFit6)
summary(PredictFit6)
summary(valid.sample$uranium)
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)
summary(fit4)
PredictFit4 <- predict(fit4, newdata = valid.sample)
acf(fit4$residuals, main="Autocorrelation of the residuals")
plot(valid.sample$tds, valid.sample$uranium, col = "red")
lines(valid.sample$tds, PredictFit2, col="blue")
fit1 <- lm(uranium ~ tds + bicarbonate, data = train.sample )
summary(fit1)
plot(fit1)
plot(valid.sample$tds, valid.sample$uranium, col = "red")
lines(valid.sample$tds, PredictFit1, col="blue")
PredictFit1 <- predict(fit1, newdata = valid.sample)
plot(valid.sample$tds, valid.sample$uranium, col = "red")
lines(valid.sample$tds, PredictFit1, col="blue")
fit5 <- lm(uranium ~ tds + tds * bicarbonate, data= train.sample)
summary(fit5)
fit5 <- lm(uranium ~ tds + tds * bicarbonate, data= train.sample)
summary(fit5)
plot(fit5)
plot(fit5)
fit2 <- lm(uranium ~ tds * bicarbonate, data = train.sample)
summary(fit2)
PredictFit2 <- predict(fit2, newdata = valid.sample)
acf(fit2$residuals, main="Autocorrelation of the residuals")
acf(fit2$residuals, main="Autocorrelation of the residuals fit2")
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)
summary(fit4)
PredictFit4 <- predict(fit4, newdata = valid.sample)
acf(fit4$residuals, main="Autocorrelation of the residuals fit4")
cor(valid.sample$)
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= train.sample)
plot(fit4)
summary(fit4)
fit4 <- lm(uranium ~ tds + bicarbonate + tds * bicarbonate, data= valid.sample)
summary(fit4)
fit45 <- lm(uranium ~., data=app16)
summary(fit45)
fit56 <- lm(uranium ~ tds*tds + bicarbonate, data = app16)
summary(fit56)
fit345 <- lm(uranium ~ tds * tds, data =app16)
hist(fit345$residuals)
fit3455 <- lm(uranium ~ tds * uranium, data =app16)
fit3455 <- lm( uranium ~ tds * uranium, data =app16)
fit67 <- lm(uranium ~ tds* uranium, data =app16)
fit67 <- lm(uranium ~ tds* bicarbonate, data =app16)
hist(fit67$residuals)
fit455 <- lm(uranium ~ tds + bicarbonate, data= app16)
hist(fit455$residuals)
summary(fit455)
plot(valid.sample$tds, valid.sample$uranium, col = "red")
lines(valid.sample$tds, PredictFit1, col="blue")
cor(valid.sample$uranium, PredictFit1)
plot(density(PredictFit1))
View(train.sample)
Predictfit45 <- predicy(fit1, newdata= app16)
Predictfit45 <- predict(fit1, newdata= app16)
plot(density(Predictfit45))
cor(valid.sample$uranium, PredictFit45)
cor(valid.sample$uranium, Predictfit45)
cor(app16$uranium, Predictfit45)
acf(fit1$residuals)
abline(fit1)
abline(lm(uranium ~ tds + bicarbonate, data=app16))
model2 <- lm(uranium ~ I(tds + bicarbonate))
model2 <- lm(uranium ~ I(tds + bicarbonate), data=app16)
abline(model2)
plot(app16$uranium, app16$tds)
abline(model2)
abline()
lm1 <- lm(nitrogen ~., data =app15)
summary(lm1)
lm3 <- lm(nitrogen ~ logda+msrain+ mjtemp, data = app15)
summary(lm3)
uraniumdata <- log10(app16$uranium)
fit1 <- lm(uraniumdata ~ tds + bicarbonate, data = app16 )
summary(fit1)
plot(fit1)
fit1 <- lm(uranium ~ tds + bicarbonate, data = app16 )
plot(fit1)
fit1 <- lm(uraniumdata ~ tds + bicarbonate, data = app16 )
hist(fit1$residuals)
fit21 <- lm(log10(app16$uranium) ~ tds + bicarbonate, data =app16)
hist(fit21$residuals)
summary(fit21)
pairs(app16)
fit21 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
hist(fit21$residuals)
acf(fit21$residuals)
pairs(app16)
fit21 <- lm(uranium ~ log10(tds) + bicarbonate, data =app16)
summary(fit21)
plot(fit21)
hist(fit21$residuals)
acf(fit21$residuals)
fit21 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
summary(fit21)
fit21 <- lm(log10(uranium) ~ sqrt(tds) + bicarbonate, data =app16)
plot(fit21)
hist(fit21$residuals)
acf(fit21$residuals)
summary(fit21)
fit23 <- lm(uranium ~ sqrt(tds) + bicarbonate, data = app16)
summary(fit23)
lm1 <- lm(nitrogen ~., data=app15)
summary(lm1)
lm3 <- lm(nitrogen ~ logda+msrain+ mjtemp, data = app15)
summary(lm3)
fit21 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
plot(fit21)
lm3 <- lm(log10(nitrogen) ~ logda+msrain+ mjtemp, data = app15)
summary(lm3)
lm3 <- lm(nitrogen ~ logda+msrain+ mjtemp, data = app15)
summary(lm3)
lm3 <- lm(log(nitrogen) ~ logda+msrain+ mjtemp, data = app15)
summary(lm3)
lm3 <- lm(log(nitrogen) ~ logda+log(msrain)+ mjtemp, data = app15)
summary(lm3)
lm3 <- lm(nitroge ~ logda+msrain+ mjtemp, data = app15)
summary(lm3)
fit6 <- lm(uranium ~ tds+ tds * bicarbonate, data = app16)
summary(fit6)
fit6 <- lm(uranium ~ tds+ + log10(bicarbonate)+tds * bicarbonate, data = app16)
fit6 <- lm(uranium ~ tds+  log10(bicarbonate)+tds * bicarbonate, data = app16)
fit6 <- lm(log10(uranium) ~ tds+ tds * bicarbonate, data = app16)
summary(fit6)
fit6 <- lm(log10(uranium) ~ tds+ bicarbonate, data = app16)
summary(fit6)
hist(fit6$residuals)
?step
plot(density(PredictFit6))
# DO NOT edit this block
knitr::opts_chunk$set(
cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.width=12,
fig.height=7
)
if(!require(pacman)) install.packages('pacman')
pacman::p_load(dplyr, readr)
app16 <- read_csv('appc16.csv') %>%
setNames(tolower(names(.))) # variable names are lower case
setwd("C:/Users/sruti/Desktop/HW3")
app16 <- read_csv('appc16.csv') %>%
setNames(tolower(names(.))) # variable names are lower case
glimpse(app16)
fit1 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate)))
install.packages("ggplot2")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate)))
install.packages("ggplot2")
library(ggplot2)
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate)))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate)))
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate)))
bicab0 <- app16 %>%
filter(bicarbonate = 0)
bicab0 <- app16 %>%
filter(bicarbonate == 0)
bicab1 <- app16 %>%
filter(bicarbonate == 1)
fit1 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
summary(fit1)
plot(fit1)
hist(fit1$residuals, main="Distribution of residuals")
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
fit3 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab1)
plot(fit2)
fit1 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
summary(fit1)
plot(fit1)
hist(fit1$residuals, main="Distribution of residuals")
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
plot(fit2)
fit3 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab1)
pllot(fit3)
plot(fit2)
plot(fit3)
fit1 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
summary(fit1)
plot(fit1)
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm", method.args = bicarbonate)
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm", method.args = list(start = list(bicarbonate=0.1))))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm", method.args = list(start = list(bicarbonate=0.1)))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm", method.args = list(start = list(bicarbonate=1, bicarbonate =0)))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(se= FALSE, method = "lm")))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(se= FALSE, method = "lm"))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(se= FALSE, method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(color = bicarbonate, se= FALSE, method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate) method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate), method = "lm")
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate), method = "lm")
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate) method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate), method = "lm") ))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate), method = "lm"))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate), method = "lm")))
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(aes(color=bicarbonate), method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+
geom_point() +
geom_smooth(method = "lm",aes(color=bicarbonate) )
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+
geom_point() +
geom_smooth(method = "lm",aes(color=factor(bicarbonate) )
bicab0 <- app16 %>%
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+
geom_point() +
geom_smooth(method = "lm",aes(color=factor(bicarbonate) )
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
ggplot(app16, aes(x=tds + bicarbonate, y= uranium))+
geom_point() +
geom_smooth(method = "lm",aes(color=factor(bicarbonate) )
ggplot(app16, aes(x=log10(tds) + bicarbonate, y= uranium))+ geom_point(aes(color=factor(bicarbonate))) + geom_smooth(method = "lm")
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
summary(fit2)
par = mfrow(p(2,2))
setwd("C:/Users/sruti/Desktop/HW3")
knitr::opts_chunk$set(echo = TRUE)
app15 <- read_csv('appc15.csv') %>%
setNames(tolower(names(.))) # variable names are lower case
glimpse(app15)
pairs(app15)
lm1 <- lm(nitrogen ~ logda+ logimp + mjtemp + msrain + pres+ pnon+ pcomm + pind, data= app15)
summary(lm1)
step(lm1, direction="both")
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
summary(fit2)
par = mfrow(p(2,2))
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
summary(fit2)
par(mfrow(c(2,2))
plot(fit2)
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
summary(fit2)
par(mfow=c(2,2))
hist(fit2$residuals, main="Plot of the residuals distribution for fit2")
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
summary(fit2)
par(mfow=c(2,2))
hist(fit2$residuals, main="Plot of the residuals distribution for fit2")
fit1 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
summary(fit1)
plot(fit1)
hist(fit1$residuals, main="Distribution of residuals for fit1")
fit3 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab1)
summary(fit3)
plot(fit3)
hist(fit3$residuals)
pairs(app15)
lm1 <- lm(nitrogen ~ logda+ logimp + mjtemp + msrain + pres+ pnon+ pcomm + pind, data= app15)
summary(lm1)
lm2 <- step(lm1, direction="both")
plot(lm2)
hist(lm2$residuals, main = "Plot of the distribution of the residuals")
summary(lm2)
lm2 <- lm(log10(nitrogen) ~ logda+ logimp + mjtemp + msrain + pres+ pnon+ pcomm + pind, data= app15)
summary(lm2)
plot(lm2)
lm3 <- step(lm2, direction="both")
summary(lm3)
plot(lm3)
hist(lm3$residuals, main = "Plot of the distribution of the residuals")
lm3 <- step(lm2, direction="both")
summary(lm3)
plot(lm3)
hist(lm3$residuals, main = "Plot of the distribution of the residuals")
summary(lm3)
lm4 <- lm(log10(nitrogen)~logda + mjtemp+logmsrain+pres+pcomm, data=app15)
summary(lm4)
plot(lm4)
hist(lm4$residuals, main="Plot of distribution of residuals for lm4")
lm4 <- lm(log10(nitrogen)~logda + mjtemp+logmsrain+pres+pcomm, data=app15)
lm4 <- lm(log10(nitrogen)~logda + mjtemp+log(msrain)+pres+pcomm, data=app15)
summary(lm4)
hist(lm4$residuals, main="Plot of distribution of residuals for lm4")
ggplot(app16, aes(x = log(tds), y = log(uranium))) +
geom_point() +
geom_smooth(method = 'lm', aes(color = factor(bicarbonate)))
ggplot(app16, aes(x = log(tds), y = log(uranium))) +
geom_point() +
geom_smooth(method = 'lm', aes(color = factor(bicarbonate)))
fit2 <- lm(log10(uranium)~ tds + bicarbonate, data=bicab0)
summary(fit2)
par(mfow=c(2,2))
hist(fit2$residuals, main="Plot of the residuals distribution for fit2")
fit1 <- lm(log10(uranium) ~ tds + bicarbonate, data =app16)
summary(fit1)
plot(fit1)
hist(fit1$residuals, main="Distribution of residuals for fit1")
